const crypto = require('crypto');
const fp = require('lodash/fp');

/**
 * The oauth_signature parameter contains a value which is generated by
 * running all of the other request parameters and two secret values through
 * a signing algorithm.
 *
 * @type string
 */
module.exports = (url, method, params, secretKey, oauthToken = '') => {
  if (!url || !method || !params || !secretKey) {
    return '';
  }

  /**
   * Both of these values need to be combined to form a signing key which will
   * be used to generate the signature. The signing key is simply the percent
   * encoded consumer secret, followed by an ampersand character ‘&’,
   * followed by the percent encoded token secret:
   */
  const key = `${secretKey}&${oauthToken}`;

  /**
   * Percent encode every key and value that will be signed.
   * Sort the list of parameters alphabetically [1] by encoded key [2].
   * For each key/value pair:
   * * Append the encoded key to the output string.
   * * Append the ‘=’ character to the output string.
   * * Append the encoded value to the output string.
   * * If there are more key/value pairs remaining, append a ‘&’ character to the output string.
   *
   * Convert the HTTP Method to uppercase and set the output string equal to this value.
   * Append the ‘&’ character to the output string.
   * Percent encode the URL and append it to the output string.
   * Append the ‘&’ character to the output string.
   * Percent encode the parameter string and append it to the output string.
   */
  return fp.flow(
    fp.keys,
    fp.map(encodeURIComponent),
    fp.sortBy(key => key),
    fp.reduce((result, key) => {
      const value = encodeURIComponent(params[key]);

      if (!result) {
        return `${key}=${value}`;
      }

      return `${result}&${key}=${value}`;
    }, ''),
    (value) => {
      return `${method.toUpperCase()}&${encodeURIComponent(url)}&${encodeURIComponent(value)}`;
    },
    (value) => {
      return crypto.createHmac('sha1', key)
        .update(value)
        .digest('base64');
    }
  )(params);
};
